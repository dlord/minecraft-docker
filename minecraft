#!/bin/bash

TMUX_SESSION=minecraft
MINECRAFT_HOME="/opt/minecraft"
MINECRAFT_SRC="/usr/src/minecraft"
MINECRAFT_VERSION=${MINECRAFT_VERSION:-1.8.8}
MINECRAFT_JAR=${MINECRAFT_JAR:-"minecraft_server.$MINECRAFT_VERSION.jar"}
MINECRAFT_STARTUP_JAR=${MINECRAFT_STARTUP_JAR:-"$MINECRAFT_JAR"}
MINECRAFT_OPTS=${MINECRAFT_OPTS:-"-server -Xmx1G -XX:+UseShenandoahGC -XX:+AlwaysPreTouch -XX:-UseBiasedLocking -XX:+DisableExplicitGC"}

check_env() {
    # Agree to EULA.
    if [ "$MINECRAFT_EULA" == "true" ]; then
        echo "Updating $MINECRAFT_HOME/eula.txt"
        echo "eula=$MINECRAFT_EULA" > $MINECRAFT_HOME/eula.txt
    else
        >&2 echo "Mojang requires you to accept their EULA. You need to set the MINECRAFT_EULA variable to true."
        exit 1
    fi

    # Do not allow to run if there is no DEFAULT_OP
    if [ -z "$DEFAULT_OP" ]; then
        >&2 echo "DEFAULT_OP is required. Please set this variable to continue."
        exit 1
    fi
}

download_server() {
    # Download the Minecraft server JAR if it does not exist.
    if [ ! -f "$MINECRAFT_HOME/$MINECRAFT_JAR" ]; then
        MANIFEST_JSON_URL=$(curl https://launchermeta.mojang.com/mc/game/version_manifest.json | jq -r ".versions[] | select (.id == \"$MINECRAFT_VERSION\") | .url")

        if [ -z "$MANIFEST_JSON_URL" ]; then
            echo "Minecraft version $MINECRAFT_VERSION not found."
            exit 1
        fi

        MINECRAFT_SERVER_URL=$(curl $MANIFEST_JSON_URL | jq -r ".downloads.server.url")

        echo "Downloading $MINECRAFT_JAR"
        curl -f -S $MINECRAFT_SERVER_URL -o $MINECRAFT_HOME/$MINECRAFT_JAR

        if [ $? -ne 0 ]; then
            >&2 echo "Unable to download $MINECRAFT_JAR."
            exit 1
        fi
    fi
}

first_run() {
    # Sync files from $MINECRAFT_SRC to $MINECRAFT_HOME. Do this on container's first run.
    if [ -f "/run/first_time" ]; then
        rsync -avhP --exclude '/world*' $MINECRAFT_SRC/ $MINECRAFT_HOME
        rm /run/first_time
    fi

    # Create server.properties if it doesn't exist
    if [ ! -f "$MINECRAFT_HOME/server.properties" ]; then
        echo "Creating $MINECRAFT_HOME/server.properties"
        echo "generator-settings=$GENERATOR_SETTINGS" >> $MINECRAFT_HOME/server.properties
        echo "op-permission-level=${OP_PERMISSION_LEVEL:-4}" >> $MINECRAFT_HOME/server.properties
        echo "allow-nether=${ALLOW_NETHER:-true}" >> $MINECRAFT_HOME/server.properties
        echo "level-name=world" >> $MINECRAFT_HOME/server.properties
        echo "enable-query=${ENABLE_QUERY:-false}" >> $MINECRAFT_HOME/server.properties
        echo "allow-flight=${ALLOW_FLIGHT:-false}" >> $MINECRAFT_HOME/server.properties
        echo "announce-player-achievements=${ANNOUNCE_PLAYER_ACHIEVEMENTS:-true}" >> $MINECRAFT_HOME/server.properties
        echo "server-port=25565" >> $MINECRAFT_HOME/server.properties
        echo "level-type=${LEVEL_TYPE:-DEFAULT}" >> $MINECRAFT_HOME/server.properties
        echo "enable-rcon=${ENABLE_RCON:-false}" >> $MINECRAFT_HOME/server.properties
        echo "force-gamemode=${FORCE_GAMEMODE:-false}" >> $MINECRAFT_HOME/server.properties
        echo "level-seed=$LEVEL_SEED" >> $MINECRAFT_HOME/server.properties
        echo "server-ip=$SERVER_IP" >> $MINECRAFT_HOME/server.properties
        echo "max-build-height=${MAX_BUILD_HEIGHT:-256}" >> $MINECRAFT_HOME/server.properties
        echo "spawn-npcs=${SPAWN_NPCS:-true}" >> $MINECRAFT_HOME/server.properties
        echo "white-list=${WHITE_LIST:-true}" >> $MINECRAFT_HOME/server.properties
        echo "spawn-animals=${SPAWN_ANIMALS:-true}" >> $MINECRAFT_HOME/server.properties
        echo "snooper-enabled=${SNOOPER_ENABLED:-true}" >> $MINECRAFT_HOME/server.properties
        echo "online-mode=${ONLINE_MODE:-true}" >> $MINECRAFT_HOME/server.properties
        echo "resource-pack=$RESOURCE_PACK" >> $MINECRAFT_HOME/server.properties
        echo "pvp=${PVP:-true}" >> $MINECRAFT_HOME/server.properties
        echo "difficulty=${DIFFICULTY:-2}" >> $MINECRAFT_HOME/server.properties
        echo "enable-command-block=${ENABLE_COMMAND_BLOCK:-true}" >> $MINECRAFT_HOME/server.properties
        echo "player-idle-timeout=${PLAYER_IDLE_TIMEOUT:-0}" >> $MINECRAFT_HOME/server.properties
        echo "gamemode=${GAMEMODE:-0}" >> $MINECRAFT_HOME/server.properties
        echo "max-players=${MAX_PLAYERS:-20}" >> $MINECRAFT_HOME/server.properties
        echo "spawn-monsters=${SPAWN_MONSTERS:-true}" >> $MINECRAFT_HOME/server.properties
        echo "view-distance=${VIEW_DISTANCE:-10}" >> $MINECRAFT_HOME/server.properties
        echo "generate-structures=${GENERATE_STRUCTURES:-true}" >> $MINECRAFT_HOME/server.properties
        echo "motd=${MOTD:-A Minecraft Server}" >> $MINECRAFT_HOME/server.properties
        echo "spawn-protection=${SPAWN_PROTECTION:-16}" >> $MINECRAFT_HOME/server.properties
    fi

    # Copy world template if there is no world yet.
    if ! find $MINECRAFT_HOME/world -mindepth 1 -print -quit | grep -q . && { find $MINECRAFT_SRC/world -mindepth 1 -print -quit | grep -q .; }; then
        echo "World template found in $MINECRAFT_SRC"
        echo "Creating new world in $MINECRAFT_HOME"
        cp -rf $MINECRAFT_SRC/world* $MINECRAFT_HOME
    fi

    # Create default ops.txt if ops.json does not exist yet.
    if [ ! -f $MINECRAFT_HOME/ops.json ]; then
        echo "Adding $DEFAULT_OP to ops list."
        echo "$DEFAULT_OP" > $MINECRAFT_HOME/ops.txt
        echo "$DEFAULT_OP" > $MINECRAFT_HOME/white-list.txt
    fi
}

update_permissions() {
    chown -R minecraft:minecraft $MINECRAFT_HOME $WORLD_DIR
}

run_minecraft() {
    echo "TERM is set to $TERM"
    pushd $MINECRAFT_HOME > /dev/null
    echo "Running Minecraft"
    echo "MINECRAFT_OPTS: $MINECRAFT_OPTS"

    PARAMS=$@
    MINECRAFT_COMMAND="gosu minecraft java $MINECRAFT_OPTS -jar $MINECRAFT_HOME/$MINECRAFT_STARTUP_JAR nogui ${PARAMS[@]}"

    echo "Extra parameters: ${PARAMS[@]}"

    if [ "$TERM" == "dumb" ]; then
        >&2 echo "WARNING! Dumb term detected. Switching to noconsole mode."
        >&2 echo "Safe shutdown must be done via /stop chat command."
        exec $MINECRAFT_COMMAND
    else
        tmux new -s $TMUX_SESSION "$MINECRAFT_COMMAND"
    fi
}

console_command() {
    COMMAND=$@
    if [ "$TERM" == "dumb" ]; then
        >&2 echo "Console command not supported on a dumb term."
        exit 1
    else
        echo "Executing console command: ${COMMAND[@]}"
        tmux send -t $TMUX_SESSION "${COMMAND[@]}" ENTER
    fi
}

safe_shutdown() {
    echo "Performing safe shutdown..."
    console_command stop
}

case "$1" in
    run)
        shift 1
        check_env
        first_run
        download_server
        update_permissions
        trap safe_shutdown EXIT
        run_minecraft $@
        ;;
    permissions)
        shift 1
        update_permissions
        ;;
    console)
        shift 1
        console_command $@
        ;;
    *)
        exec "$@"
esac
